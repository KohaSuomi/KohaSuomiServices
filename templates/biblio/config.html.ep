% layout 'default';
% title 'Welcome';
%= include 'layouts/_navbar'
<div id="content-wrapper">
  <div class="container-fluid">
    <!-- Breadcrumbs-->
    <ol class="breadcrumb">
      <li class="breadcrumb-item active">Configurations</li>
    </ol>
    <div role="main" class="ml-sm-auto pt-3 px-4">
      <div id="app">
        <h2>Interfaces</h2>
        <div class="table-responsive">
          <table class="table table-striped table-sm">
            <thead>
              <tr>
                <th>Name</th>
                <th>Interface</th>
                <th>Type</th>
                <th>Local</th>
                <th>Endpoint url</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <tr is="config-list"
                v-for="(config, index) in configs"
                v-bind:config="config"
                v-bind:parameters="parameters">
              </tr>
            </tbody>
          </table>
          <div>
            <p v-if="errors.length">
              <b>Please correct the following error(s):</b>
              <ul>
                <li v-for="error in errors">{{ error }}</li>
              </ul>
            </p>
            <form @submit="checkForm">
              <div class="input-group">
                <input type="text" class="form-control" v-model="name" placeholder="Name">
                <select class="form-control" v-model="interface" placeholder="Interface">
                  <option value='' selected>Select interface</option>
                  <option value='REST'>REST</option>
                  <option value='SRU'>SRU</option>
                </select>
                <select class="form-control" v-model="type" placeholder="Type">
                  <option value='' selected>Select type</option>
                  <option value='search'>search</option>
                  <option value='get'>get</option>
                  <option value='add'>add</option>
                  <option value='update'>update</option>
                </select>
                <select class="form-control" v-model="local" placeholder="False">
                  <option value='0' selected>False</option>
                  <option value='1'>True</option>
                </select>
                <input type="text" class="form-control" v-model="endpoint_url" placeholder="Url">
                <button class="btn btn-sm btn-primary" type="submit">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>
<template id="list-items">
  <tr>
    <td>
      <div v-if="showUpdate"><input type="text" class="form-control" v-model="config.name"></div>
      <div v-else>{{config.name}}</div>
    </td>
    <td>
      <div v-if="showUpdate"><select class="form-control" v-model="config.interface" placeholder="Interface">
        <option value='REST'>REST</option>
        <option value='SRU'>SRU</option>
      </select>
      </div>
      <div v-else>{{config.interface}}</div>
    </td>
    <td>
      <div class="d-inline-block" v-if="showUpdate"><select class="form-control" v-model="config.type" placeholder="Type">
          <option value='search'>search</option>
          <option value='get'>get</option>
          <option value='add'>add</option>
          <option value='update'>update</option>
        </select>
      </div>
      <div v-else>{{config.type}}</div>
    </td>
    <td>
      <div v-if="showUpdate"><select class="form-control" v-model="config.local" placeholder="Interface">
        <option value='0'>False</option>
        <option value='1'>True</option>
      </select>
      </div>
      <div v-else>{{config.local}}</div>
    </td>
    <td>
      <div class="d-inline-block" v-if="showUpdate"><input type="text" class="form-control" v-model="config.endpoint_url"></div>
      <div v-else>{{config.endpoint_url}}</div>
    </td>
    <td style="cursor:pointer">
      <div class="d-inline-block" v-if="showUpdate"><button v-on:click="fetchParameters(config)" class="btn btn-sm btn-primary" data-toggle="modal" :data-target="'#parameterModal' + config.id">Handle parameters</button></div>
      <modal-component v-bind:config="config" v-bind:parameters="parameters"></modal-component>
      <div class="d-inline-block" v-if="showUpdate"><button v-on:click="updateConfig(config)" class="btn btn-sm btn-secondary" type="submit">Update</button></div>
      <div class="d-inline-block" v-if="showUpdate"><button v-on:click="deleteConfig(config)" class="btn btn-sm btn-warning" type="submit">Delete</button></div>
      <div class="d-inline-block"><i v-on:click="updateToggle" class="fas fa-cog"></i></div>
    </td>
  </tr>
</template>
<template id="parameter-modal">
  %= include 'layouts/_parameterModal'
</template>
<script>
  var baseendpoint = '<%= $baseendpoint %>';
  var apikey = '<%= $apikey %>';
  new Vue({
    el: '#app',
    created() {
        this.fetchData();	
    },
    data: {
        errors: [],
        configs: [],
        parameters: [],
        interface: "",
        name: "",
        type: "",
        endpoint_url: "",
        local: "",
        parametername: "",
        parametertype: "",
        parametervalue: ""
    },
    methods: {
        fetchData() {
        axios.get(baseendpoint+'config', {
          headers: { Authorization: apikey },
          params: {
            service: 'biblio',
            table: 'interface'
          }
        }).then(response => {
            this.configs = response.data;
            });
        },
        fetchParameters(id) {
        axios.get(baseendpoint+'config', {
          headers: { Authorization: apikey },
          params: {
            service: 'biblio',
            table: 'parameter',
            id: id,
          }
        }).then(response => {
            this.parameters = response.data;
            });
        },
        addParameter(params) {
        axios.post(baseendpoint+'config', 
          {
            service: 'biblio',
            table: 'parameter',
            params: params
          },
          {headers: { Authorization: apikey }}
        ).then(response => {
              
            });
        },
        addConfig() {
        axios.post(baseendpoint+'config',
          {
            service: 'biblio',
            table: 'interface',
            params: {interface: this.interface, name: this.name, type: this.type, local: this.local, endpoint_url: this.endpoint_url}
          },
          {headers: { Authorization: apikey }}
        ).then(response => {
            this.fetchData();
            });
        },
        updateConfig(config) {
          axios.put(baseendpoint+'config',
          {
            service: 'biblio',
            table: 'interface',
            id: config.id,
            params: {interface: config.interface, name: config.name, type: config.type, local: config.local, endpoint_url: config.endpoint_url}
          },
          {headers: { Authorization: apikey }}
        ).then(response => {
            
            });
        },
        deleteConfig(config) {
          axios.delete(baseendpoint+'config',
          {
            headers: { Authorization: apikey },
            params: {
              service: 'biblio',
              table: 'interface',
              id: config.id
            }
          }
        ).then(response => {
            this.fetchData();
            });
        },
        deleteParameter(id) {
          axios.delete(baseendpoint+'config',
          {
            headers: { Authorization: apikey },
            params: {
              service: 'biblio',
              table: 'parameter',
              id: id
            }
          }
        ).then(response => {
            });
        },
        checkForm(e) {
            var url_validate = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
          if (this.name && this.interface && this.type && this.endpoint_url && url_validate.test(this.endpoint_url)) {
            this.addConfig();
          } 
          this.errors = [];

          if (!this.name) {
            this.errors.push('Name required.');
          }
          if (!this.interface) {
            this.errors.push('Interface required.');
          }
          if (!this.type) {
            this.errors.push('Type required.');
          }
          if (!this.endpoint_url) {
            this.errors.push('Url required.');
          }
          if (!url_validate.test(this.endpoint_url)) {
            this.errors.push('Incorrect url.');
          }
          e.preventDefault();
        }
    }
});
Vue.component('config-list', {
  template: "#list-items",
  data: function() {
    return {
      showUpdate: false
    }
  },
  methods: {
    updateConfig(config){
        this.showUpdate = false;
        this.$parent.updateConfig(config);
    },
    deleteConfig(config){
        this.showUpdate = false;
        this.$parent.deleteConfig(config);
    },
    fetchParameters(config){
        this.$parent.fetchParameters(config.id);
    },
    updateToggle(){
        this.showUpdate = !this.showUpdate;
    }
  },
  props: ['config', 'parameters']
});
Vue.component('modal-component', {
  template: "#parameter-modal",
  data: function() {
    return {
      parametername: "",
      parametertype: "",
      parametervalue: ""
    }
  },
  methods: {
    addParameter(interface_id, e) {
      e.preventDefault();
      var params = {interface_id: interface_id, name: this.parametername, type: this.parametertype, value: this.parametervalue};
      this.$parent.$parent.addParameter(params);
      this.$parent.$parent.fetchParameters(interface_id);
    },
    deleteParameter(parameter, e) {
      e.preventDefault();
      this.$parent.$parent.deleteParameter(parameter.id);
      this.$parent.$parent.fetchParameters(parameter.interface_id);
    }
  },
  props: ['config','parameters']
});
</script>
